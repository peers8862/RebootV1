
giscus
<script src="https://giscus.app/client.js"
        data-repo="peers8862/RebootV1"
        data-repo-id="R_kgDOOGs1xA"
        data-category="Reboot"
        data-category-id="DIC_kwDOOGs1xM4Cn07c"
        data-mapping="og:title"
        data-strict="0"
        data-reactions-enabled="0"
        data-emit-metadata="1"
        data-input-position="top"
        data-theme="light_protanopia"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>



name: Create Jekyll Page from Issue Form

on:
  issues:
    types: [opened, edited]

jobs:
  create-page:
    if: ${{ contains(github.event.issue.labels.*.name, 'new-page') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Extract form data
        id: extract-data
        run: |
          TITLE=$(echo '${{ github.event.issue.title }}' | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
          ISSUE_BODY='${{ github.event.issue.body }}'
          
          # Extract fields from issue body
          PAGE_TITLE=$(echo "$ISSUE_BODY" | grep -A1 "### Page Title" | tail -n1 | sed 's/^[ \t]*//')
          PAGE_CONTENT=$(echo "$ISSUE_BODY" | grep -A1 "### Page Content" | tail -n1 | sed 's/^[ \t]*//')
          PAGE_LAYOUT=$(echo "$ISSUE_BODY" | grep -A1 "### Layout" | tail -n1 | sed 's/^[ \t]*//')
          
          # Create filename with date prefix for posts or simple name for pages
          if [[ "$PAGE_LAYOUT" == "post" ]]; then
            FILENAME="_posts/$(date +%Y-%m-%d)-${TITLE}.md"
          else
            FILENAME="_pages/${TITLE}.md"
            mkdir -p _pages
          fi
          
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT
          echo "page_title=$PAGE_TITLE" >> $GITHUB_OUTPUT
          echo "page_layout=$PAGE_LAYOUT" >> $GITHUB_OUTPUT
          echo "page_content=$PAGE_CONTENT" >> $GITHUB_OUTPUT
      
      - name: Create page file
        run: |
          cat > ${{ steps.extract-data.outputs.filename }} << EOF
          ---
          layout: ${{ steps.extract-data.outputs.page_layout }}
          title: "${{ steps.extract-data.outputs.page_title }}"
          date: $(date +"%Y-%m-%d %H:%M:%S %z")
          ---
          
          ${{ steps.extract-data.outputs.page_content }}
          EOF
      
      - name: Commit and push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ${{ steps.extract-data.outputs.filename }}
          git commit -m "Add new page from issue #${{ github.event.issue.number }}"
          git push
      
      - name: Comment on issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Page created successfully! Your new page has been added to the repository.'
            })
            
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            })




name: Create Reboot
description: New Page for Reboot.Chat
title: "New Page: "
labels: ["new-page"]
body:
  - type: input
    id: page-title
    attributes:
      label: "Page Title"
      description: "Enter the title of the new page."
      placeholder: "Example: My New Blog Post"
    validations:
      required: true

  - type: textarea
    id: page-content
    attributes:
      label: "Summary of the Issue"
      description: "Brief description of the main issue"
      placeholder: "Write your response here..."
    validations:
      required: true

  - type: input
    id: author
    attributes:
      label: "Name"
      description: "Enter your name or alias"
      placeholder: "Name or alias to associate with your Github handle"
    validations:
      required: true


name: Create New Reboot
on:
  issues:
    types: [opened, edited]

jobs:
  create-page:
    if: ${{ contains(github.event.issue.labels.*.name, 'new-page') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Extract form data
        id: extract-data
        run: |
          TITLE=$(echo "${{ github.event.issue.title }}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
          
          # Store issue body in a file to avoid quote escaping issues
          echo '${{ github.event.issue.body }}' > issue_body.txt
          
          # Extract fields from issue body
          PAGE_TITLE=$(grep -A1 "### Page Title" issue_body.txt | tail -n1 | sed 's/^[ \t]*//')
          PAGE_CONTENT=$(grep -A1 "### Page Content" issue_body.txt | tail -n1 | sed 's/^[ \t]*//')
          PAGE_LAYOUT=$(grep -A1 "### Layout" issue_body.txt | tail -n1 | sed 's/^[ \t]*//')
          
          # Create filename with date prefix for posts or simple name for pages
          if [[ "$PAGE_LAYOUT" == "post" ]]; then
            FILENAME="_posts/$(date +%Y-%m-%d)-${TITLE}.md"
            # For posts, Jekyll usually generates URLs like /YYYY/MM/DD/title/ (without .html extension)
            URL_PATH="$(date +%Y/%m/%d)/${TITLE}"
          else
            FILENAME="_pages/${TITLE}.md"
            # For pages, Jekyll usually generates URLs like /title/ (without .html extension)
            URL_PATH="${TITLE}"
            mkdir -p _pages
          fi
          
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT
          echo "url_path=$URL_PATH" >> $GITHUB_OUTPUT
          echo "page_title=$PAGE_TITLE" >> $GITHUB_OUTPUT
          echo "page_layout=$PAGE_LAYOUT" >> $GITHUB_OUTPUT
          
          # Write page content to a file to avoid quoting issues
          echo "$PAGE_CONTENT" > page_content.txt
      
      - name: Create page file
        run: |
          # Create frontmatter
          echo "---" > ${{ steps.extract-data.outputs.filename }}
          echo "layout: ${{ steps.extract-data.outputs.page_layout }}" >> ${{ steps.extract-data.outputs.filename }}
          echo "title: \"${{ steps.extract-data.outputs.page_title }}\"" >> ${{ steps.extract-data.outputs.filename }}
          echo "date: $(date +"%Y-%m-%d %H:%M:%S %z")" >> ${{ steps.extract-data.outputs.filename }}
          echo "permalink: /${{ steps.extract-data.outputs.url_path }}/" >> ${{ steps.extract-data.outputs.filename }}
          echo "---" >> ${{ steps.extract-data.outputs.filename }}
          echo "" >> ${{ steps.extract-data.outputs.filename }}
          
          # Append content
          cat page_content.txt >> ${{ steps.extract-data.outputs.filename }}
      
      - name: Commit and push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ${{ steps.extract-data.outputs.filename }}
          git commit -m "Add new page from issue #${{ github.event.issue.number }}"
          git push
      
      - name: Comment on issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const urlPath = "${{ steps.extract-data.outputs.url_path }}";
            
            // Use custom domain with trailing slash and without .html
            const siteUrl = `https://www.reboot.chat/${urlPath}/`;
            
            // Add a comment with the link to the page
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ Page created successfully!\n\n` +
                    `Your new page will be available at: [${siteUrl}](${siteUrl})\n\n` +
                    `Note: It may take a few minutes for the site to build and deploy the changes.`
            });
            
            // Close the issue
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            });

