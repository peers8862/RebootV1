name: Create Jekyll Page from Issue Form

on:
  issues:
    types: [opened, edited]

jobs:
  create-page:
    if: contains(github.event.issue.labels.*.name, 'new-page')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Debug issue data
        run: |
          echo "Issue Title: ${{ github.event.issue.title }}"
          echo "Issue Body Length: $(echo '${{ github.event.issue.body }}' | wc -c) characters"
      
      - name: Save issue body to file
        run: |
          # Save the issue body to a file to avoid shell escaping issues
          echo '${{ github.event.issue.body }}' > issue_body.txt
          
          # Show the first 10 lines for debugging
          echo "First 10 lines of issue body:"
          head -n 10 issue_body.txt
      
        - name: Extract form data
        id: extract
        run: |
          BODY="${{ github.event.issue.body }}"

          PAGE_TITLE=$(echo "$BODY" | awk '/### Page Title/{getline; print}' | sed 's/^[ \t]*//;s/[ \t]*$//')
          PAGE_LAYOUT=$(echo "$BODY" | awk '/### Layout/{getline; print}' | sed 's/^[ \t]*//;s/[ \t]*$//')
          PAGE_CONTENT=$(echo "$BODY" | awk '/### Page Content/{flag=1; next} /^###/{flag=0} flag')

          # Convert title into a filename-safe slug
          SAFE_TITLE=$(echo "$PAGE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g')

          # Define filename and permalink
          if [[ "$PAGE_LAYOUT" == "post" ]]; then
            FILENAME="_posts/$(date +%Y-%m-%d)-${SAFE_TITLE}.md"
            URL_PATH="$(date +%Y/%m/%d)/${SAFE_TITLE}"
          else
            FILENAME="_pages/${SAFE_TITLE}.md"
            URL_PATH="${SAFE_TITLE}"
          fi

          # Store environment variables
          echo "PAGE_TITLE=$PAGE_TITLE" >> $GITHUB_ENV
          echo "PAGE_LAYOUT=$PAGE_LAYOUT" >> $GITHUB_ENV
          echo "PAGE_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$PAGE_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "FILENAME=$FILENAME" >> $GITHUB_ENV
          echo "URL_PATH=$URL_PATH" >> $GITHUB_ENV

          
            # Save content to a separate file to avoid shell escaping issues
            echo "$PAGE_CONTENT" > page_content.txt
        
        - name: Create page file
        run: |
          # Create the frontmatter
          cat > "${{ env.FILENAME }}" <<- EOF
          ---
          layout: ${{ env.PAGE_LAYOUT }}
          title: "${{ env.PAGE_TITLE }}"
          date: $(date +"%Y-%m-%d %H:%M:%S %z")
          permalink: /${{ env.URL_PATH }}/
          nav_exclude: true
          ---
          
          EOF

          # Append content safely
          echo "${{ env.PAGE_CONTENT }}" >> "${{ env.FILENAME }}"

          # Show file content for debugging
          echo "----------- Final file content -----------"
          cat "${{ env.FILENAME }}"
          echo "-----------------------------------------"

        
        - name: Commit and push changes
          run: |
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add "${{ env.filename }}"
            git commit -m "Add new page from issue #${{ github.event.issue.number }}"
            git push
        
        - name: Comment on the issue
          uses: actions/github-script@v6
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const urlPath = "${{ env.url_path }}";
              const siteUrl = `https://www.reboot.chat/${urlPath}/`;
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `âœ… Page created successfully!\n\nYour new page will be available at: [${siteUrl}](${siteUrl})\n\nNote: It may take a few minutes for the site to build and deploy the changes.`
              });
              await github.rest.issues.update({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'closed'
              });
