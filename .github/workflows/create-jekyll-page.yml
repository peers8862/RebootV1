- name: Extract form data and create page
  id: extract-data
  run: |
    # Extract issue title and sanitize it
    TITLE=$(echo "${{ github.event.issue.title }}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')

    # Extract raw issue body
    BODY="${{ github.event.issue.body }}"

    # Ensure BODY is not null
    if [[ -z "$BODY" || "$BODY" == "null" ]]; then
      echo "Error: Issue body is empty or null."
      exit 1
    fi

    # Extract key fields using grep and sed
    PAGE_TITLE=$(echo "$BODY" | grep -A1 'Page Title' | tail -n1 | sed 's/^[ \t]*//;s/[ \t]*$//')
    PAGE_LAYOUT=$(echo "$BODY" | grep -A1 'Layout' | tail -n1 | sed 's/^[ \t]*//;s/[ \t]*$//')
    PAGE_CONTENT=$(echo "$BODY" | grep -A1 'Page Content' | tail -n1 | sed 's/^[ \t]*//;s/[ \t]*$//')

    # Default to 'page' layout if none is provided
    [ -z "$PAGE_LAYOUT" ] && PAGE_LAYOUT="page"

    # Define filename and permalink
    if [[ "$PAGE_LAYOUT" == "post" ]]; then
      FILENAME="_posts/$(date +%Y-%m-%d)-${TITLE}.md"
      URL_PATH="$(date +%Y/%m/%d)/${TITLE}"
    else
      FILENAME="_pages/${TITLE}.md"
      URL_PATH="${TITLE}"
    fi

    # Output variables for later use
    echo "filename=$FILENAME" >> $GITHUB_ENV
    echo "url_path=$URL_PATH" >> $GITHUB_ENV
    echo "page_title=$PAGE_TITLE" >> $GITHUB_ENV
    echo "page_layout=$PAGE_LAYOUT" >> $GITHUB_ENV

    # Ensure directory exists
    mkdir -p $(dirname "$FILENAME")

    # Create markdown file
    cat <<EOF > "$FILENAME"
    ---
    layout: $PAGE_LAYOUT
    title: "$PAGE_TITLE"
    date: $(date +"%Y-%m-%d %H:%M:%S %z")
    permalink: /$URL_PATH/
    ---
    $PAGE_CONTENT
    EOF

    # Show file content for debugging
    cat "$FILENAME"
